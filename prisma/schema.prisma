// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Module {
  id                Int                @id @default(autoincrement())
  name              String
  description       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  modulePermissions ModulePermission[]
}

model ModulePermission {
  id              Int               @id @default(autoincrement())
  name            String
  moduleId        Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  module          Module            @relation(fields: [moduleId], references: [id])
  rolePermissions RolePermissions[]
}

model RolePermissions {
  id                 Int              @id @default(autoincrement())
  rolId              Int
  modulePermissionId Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  role               Role             @relation(fields: [rolId], references: [id])
  modulePermission   ModulePermission @relation(fields: [modulePermissionId], references: [id])
}

model Role {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  rolePermissions RolePermissions[]
  userRoles       UserRoles[]
}

model UserRoles {
  id        Int      @id @default(autoincrement())
  userId    String
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])
}

model User {
  id                     String        @id @default(cuid())
  name                   String?
  email                  String?       @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  changedDefaultPassword Boolean?      @default(false)
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  accounts               Account[]
  sessions               Session[]
  userRoles              UserRoles[]
  Inscription            Inscription[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  rememberUser Boolean
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  expires    DateTime

  @@unique([identifier, token])
}

model Inscription {
  id           Int      @id @default(autoincrement())
  name         String
  phone        String
  email        String
  company      String
  city         String
  description  String?
  registeredBy String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  registered   User?    @relation(fields: [registeredBy], references: [id])
}
